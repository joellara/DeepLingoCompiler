DeepLingo compiler, version 0.5
Copyright Â© 2018 by ______, ITESM CEM.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or later.
This program has absolutely no warranty.

Included in this release:
   * Lexical analysis
   * Syntactic analysis
   * AST construction
   * Semantic analysis
   * CIL code generation

****** Lexical Analysis ******
===== Tokens Identification
===== Tokens from: "test_programs/ultimate.deep" =====
[1] {IDENTIFIER, "main", @(7, 1)}
[2] {OPENEDPAR, "(", @(7, 5)}
[3] {CLOSEDPAR, ")", @(7, 6)}
[4] {OPENEDCURLY, "{", @(7, 8)}
[5] {IDENTIFIER, "prints", @(8, 5)}
[6] {OPENEDPAR, "(", @(8, 11)}
[7] {STRING, ""The answer to the ultimate question of life, "", @(8, 12)}
[8] {CLOSEDPAR, ")", @(8, 59)}
[9] {SEMICOLON, ";", @(8, 60)}
[10] {IDENTIFIER, "prints", @(9, 5)}
[11] {OPENEDPAR, "(", @(9, 11)}
[12] {STRING, ""the universe, and everything: "", @(9, 12)}
[13] {CLOSEDPAR, ")", @(9, 44)}
[14] {SEMICOLON, ";", @(9, 45)}
[15] {IDENTIFIER, "printi", @(10, 5)}
[16] {OPENEDPAR, "(", @(10, 11)}
[17] {NOT, "!", @(10, 12)}
[18] {INTLITERAL, "0", @(10, 13)}
[19] {CLOSEDPAR, ")", @(10, 14)}
[20] {SEMICOLON, ";", @(10, 15)}
[21] {IDENTIFIER, "println", @(11, 5)}
[22] {OPENEDPAR, "(", @(11, 12)}
[23] {CLOSEDPAR, ")", @(11, 13)}
[24] {SEMICOLON, ";", @(11, 14)}
[25] {CLOSEDCURLY, "}", @(12, 1)}
[26] {EOF, "", @(12, 2)}
****** Syntactic Analysis ******
===== Syntax OK =====
===================
===== AST Tree =====
Program 
  FunDef {IDENTIFIER, "main", @(7, 1)}
    IdList 
    VarDefList 
    StmtList 
      FunCall {IDENTIFIER, "prints", @(8, 5)}
        ExprList 
          Str {STRING, ""The answer to the ultimate question of life, "", @(8, 12)}
      FunCall {IDENTIFIER, "prints", @(9, 5)}
        ExprList 
          Str {STRING, ""the universe, and everything: "", @(9, 12)}
      FunCall {IDENTIFIER, "printi", @(10, 5)}
        ExprList 
          ExprUnary {NOT, "!", @(10, 12)}
            IntLiteral {INTLITERAL, "0", @(10, 13)}
      FunCall {IDENTIFIER, "println", @(11, 5)}
        ExprList 
===================
Semantics OK.

Global Symbol Table
============
============
Global Function Table
============
[add, 2]
[get, 2]
[main, 0]
[new, 1]
[printc, 1]
[printi, 1]
[println, 0]
[prints, 1]
[readi, 0]
[reads, 0]
[set, 3]
[size, 1]
============
Local Symbol Tables

[main, Symbol Table:
]
============
Generated CIL code to 'test_programs/ultimate.il'.

Assembling 'test_programs/ultimate.il' , no listing file, to exe --> 'test_programs/ultimate.exe'

Operation completed successfully
